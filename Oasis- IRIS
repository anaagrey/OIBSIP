{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1modhVYYS34IXvmgYTISdcHh2EJrrIznW","authorship_tag":"ABX9TyNMDyv507h1uahDuIRLDlXo"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd"],"metadata":{"id":"zGGmrtimekJf","executionInfo":{"status":"ok","timestamp":1711883117330,"user_tz":-330,"elapsed":1664,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["dataset = pd.read_csv('Iris.csv')"],"metadata":{"id":"RbDc_yiNxHk8","executionInfo":{"status":"ok","timestamp":1711883147992,"user_tz":-330,"elapsed":1882,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["dataset.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"LFlqGZEbxL95","executionInfo":{"status":"ok","timestamp":1711883153242,"user_tz":-330,"elapsed":35,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"936bbcfd-ca29-4228-8e75-321b350d2b07"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n","0   1            5.1           3.5            1.4           0.2  Iris-setosa\n","1   2            4.9           3.0            1.4           0.2  Iris-setosa\n","2   3            4.7           3.2            1.3           0.2  Iris-setosa\n","3   4            4.6           3.1            1.5           0.2  Iris-setosa\n","4   5            5.0           3.6            1.4           0.2  Iris-setosa"],"text/html":["\n","  <div id=\"df-956b8e5b-e115-45af-ae4f-f1f6c81af18c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>SepalLengthCm</th>\n","      <th>SepalWidthCm</th>\n","      <th>PetalLengthCm</th>\n","      <th>PetalWidthCm</th>\n","      <th>Species</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>Iris-setosa</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-956b8e5b-e115-45af-ae4f-f1f6c81af18c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-956b8e5b-e115-45af-ae4f-f1f6c81af18c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-956b8e5b-e115-45af-ae4f-f1f6c81af18c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c5d8b275-48ea-4bce-9df1-8fec0f9e20a1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c5d8b275-48ea-4bce-9df1-8fec0f9e20a1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c5d8b275-48ea-4bce-9df1-8fec0f9e20a1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dataset","summary":"{\n  \"name\": \"dataset\",\n  \"rows\": 150,\n  \"fields\": [\n    {\n      \"column\": \"Id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43,\n        \"min\": 1,\n        \"max\": 150,\n        \"num_unique_values\": 150,\n        \"samples\": [\n          74,\n          19,\n          119\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SepalLengthCm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.828066127977863,\n        \"min\": 4.3,\n        \"max\": 7.9,\n        \"num_unique_values\": 35,\n        \"samples\": [\n          6.2,\n          4.5,\n          5.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SepalWidthCm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4335943113621737,\n        \"min\": 2.0,\n        \"max\": 4.4,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2.3,\n          4.0,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PetalLengthCm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7644204199522626,\n        \"min\": 1.0,\n        \"max\": 6.9,\n        \"num_unique_values\": 43,\n        \"samples\": [\n          6.7,\n          3.8,\n          3.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PetalWidthCm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7631607417008411,\n        \"min\": 0.1,\n        \"max\": 2.5,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          0.2,\n          1.2,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Species\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Iris-setosa\",\n          \"Iris-versicolor\",\n          \"Iris-virginica\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["dataset['Species'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HAKTwa8UMDOF","executionInfo":{"status":"ok","timestamp":1711883315209,"user_tz":-330,"elapsed":13,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"2e7d6560-f4d8-4f90-a011-73f3c2594c71"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Iris-setosa        50\n","Iris-versicolor    50\n","Iris-virginica     50\n","Name: Species, dtype: int64"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["dataset.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"4LLBf4x7xRUv","executionInfo":{"status":"ok","timestamp":1711883361587,"user_tz":-330,"elapsed":713,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"484ac21c-efdd-44c8-ee0a-691d01d964ab"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm\n","count  150.000000     150.000000    150.000000     150.000000    150.000000\n","mean    75.500000       5.843333      3.054000       3.758667      1.198667\n","std     43.445368       0.828066      0.433594       1.764420      0.763161\n","min      1.000000       4.300000      2.000000       1.000000      0.100000\n","25%     38.250000       5.100000      2.800000       1.600000      0.300000\n","50%     75.500000       5.800000      3.000000       4.350000      1.300000\n","75%    112.750000       6.400000      3.300000       5.100000      1.800000\n","max    150.000000       7.900000      4.400000       6.900000      2.500000"],"text/html":["\n","  <div id=\"df-334c4936-1687-4c50-bbfb-d1a843bf87a8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>SepalLengthCm</th>\n","      <th>SepalWidthCm</th>\n","      <th>PetalLengthCm</th>\n","      <th>PetalWidthCm</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","      <td>150.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>75.500000</td>\n","      <td>5.843333</td>\n","      <td>3.054000</td>\n","      <td>3.758667</td>\n","      <td>1.198667</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>43.445368</td>\n","      <td>0.828066</td>\n","      <td>0.433594</td>\n","      <td>1.764420</td>\n","      <td>0.763161</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>4.300000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>0.100000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>38.250000</td>\n","      <td>5.100000</td>\n","      <td>2.800000</td>\n","      <td>1.600000</td>\n","      <td>0.300000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>75.500000</td>\n","      <td>5.800000</td>\n","      <td>3.000000</td>\n","      <td>4.350000</td>\n","      <td>1.300000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>112.750000</td>\n","      <td>6.400000</td>\n","      <td>3.300000</td>\n","      <td>5.100000</td>\n","      <td>1.800000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>150.000000</td>\n","      <td>7.900000</td>\n","      <td>4.400000</td>\n","      <td>6.900000</td>\n","      <td>2.500000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-334c4936-1687-4c50-bbfb-d1a843bf87a8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-334c4936-1687-4c50-bbfb-d1a843bf87a8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-334c4936-1687-4c50-bbfb-d1a843bf87a8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-16bd45c4-4d92-4773-9749-2983211368e3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-16bd45c4-4d92-4773-9749-2983211368e3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-16bd45c4-4d92-4773-9749-2983211368e3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"dataset\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.756293020494844,\n        \"min\": 1.0,\n        \"max\": 150.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          150.0,\n          75.5,\n          112.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SepalLengthCm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.24711349471842,\n        \"min\": 0.828066127977863,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.843333333333334,\n          5.8,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SepalWidthCm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.08647211421483,\n        \"min\": 0.4335943113621737,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.0540000000000003,\n          3.0,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PetalLengthCm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.835227940958106,\n        \"min\": 1.0,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.758666666666666,\n          4.35,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PetalWidthCm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.636634243409915,\n        \"min\": 0.1,\n        \"max\": 150.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.1986666666666668,\n          1.3,\n          150.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["dataset.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"upJ48bzUxUWl","executionInfo":{"status":"ok","timestamp":1711883367221,"user_tz":-330,"elapsed":507,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"b0631ffb-c86a-4669-9491-678779d2d63d"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 150 entries, 0 to 149\n","Data columns (total 6 columns):\n"," #   Column         Non-Null Count  Dtype  \n","---  ------         --------------  -----  \n"," 0   Id             150 non-null    int64  \n"," 1   SepalLengthCm  150 non-null    float64\n"," 2   SepalWidthCm   150 non-null    float64\n"," 3   PetalLengthCm  150 non-null    float64\n"," 4   PetalWidthCm   150 non-null    float64\n"," 5   Species        150 non-null    object \n","dtypes: float64(4), int64(1), object(1)\n","memory usage: 7.2+ KB\n"]}]},{"cell_type":"code","source":["X=dataset.drop(columns='Species')\n","y=dataset['Species']\n","print(X.shape, len(y))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IsB_YM0dM3Ee","executionInfo":{"status":"ok","timestamp":1711883537098,"user_tz":-330,"elapsed":469,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"f4fe27b4-0e00-45b4-8c5e-829dd04b79a5"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["(150, 5) 150\n"]}]},{"cell_type":"code","source":["le = LabelEncoder()\n","y = le.fit_transform(y)\n","print(y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7PzVF1iOO_KO","executionInfo":{"status":"ok","timestamp":1711884039499,"user_tz":-330,"elapsed":1849,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"f82ce472-0b0a-4176-d772-e61b93c6876f"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2]\n"]}]},{"cell_type":"code","source":["from pickle import TRUE\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X,y,shuffle=True, random_state=100 ,test_size=0.2)"],"metadata":{"id":"oP8RXzhCxaSy","executionInfo":{"status":"ok","timestamp":1711884153883,"user_tz":-330,"elapsed":528,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["!pip install scikit-learn"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PaY4grux0koI","executionInfo":{"status":"ok","timestamp":1711883579798,"user_tz":-330,"elapsed":6790,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"185d5269-88a0-4a13-9919-100fa2b860e2"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.25.2)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.4.0)\n"]}]},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","from sklearn.preprocessing import LabelEncoder"],"metadata":{"id":"JNZ2VB6O0my1","executionInfo":{"status":"ok","timestamp":1711884169360,"user_tz":-330,"elapsed":448,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["classifier = LogisticRegression()\n","classifier.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":213},"id":"7_o4EuSx0sJT","executionInfo":{"status":"ok","timestamp":1711884171786,"user_tz":-330,"elapsed":26,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"e8920699-8075-42fc-8e4b-6f7dce54f6d6"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression()"],"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["print(classifier.predict(X_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Varj1XKlx2ti","executionInfo":{"status":"ok","timestamp":1711884175119,"user_tz":-330,"elapsed":12,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"3ada179a-a52d-4c4e-a06b-471519314939"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["[2 0 2 0 2 2 0 0 2 0 0 2 0 0 2 1 1 1 2 2 2 0 2 0 1 2 1 0 1 2]\n"]}]},{"cell_type":"code","source":["y_pred = classifier.predict(X_test)"],"metadata":{"id":"IG3eoviVx90l","executionInfo":{"status":"ok","timestamp":1711884180192,"user_tz":-330,"elapsed":745,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MbuwsDDJyA6i","executionInfo":{"status":"ok","timestamp":1711884183153,"user_tz":-330,"elapsed":14,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"b105d1eb-841c-4e96-eb95-a3a75241609a"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 1, 1, 1, 2, 2, 2, 0,\n","       2, 0, 1, 2, 1, 0, 1, 2])"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["y_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UllbxAQUyFLp","executionInfo":{"status":"ok","timestamp":1711884194348,"user_tz":-330,"elapsed":546,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"bc5c3f19-6789-4364-c840-8519153c75e5"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 0, 2, 0, 2, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 1, 1, 1, 2, 2, 2, 0,\n","       2, 0, 1, 2, 1, 0, 1, 2])"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["probs_y=classifier.predict_proba(X_test)"],"metadata":{"id":"g2j1hxIxyKZg","executionInfo":{"status":"ok","timestamp":1711884206010,"user_tz":-330,"elapsed":546,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["probs_y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6LkYTd4ByLNN","executionInfo":{"status":"ok","timestamp":1711884208850,"user_tz":-330,"elapsed":8,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"7d094bb5-cd29-4ccc-9e17-14446a1c3a52"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[3.29675221e-08, 5.68223815e-04, 9.99431743e-01],\n","       [9.90416704e-01, 9.58329621e-03, 7.87873510e-13],\n","       [5.39473422e-08, 1.71693529e-03, 9.98283011e-01],\n","       [9.99256447e-01, 7.43552995e-04, 1.11558225e-13],\n","       [1.01883901e-06, 2.51566804e-03, 9.97483313e-01],\n","       [8.30635280e-09, 5.28950425e-05, 9.99947097e-01],\n","       [9.94577912e-01, 5.42208791e-03, 2.06795708e-11],\n","       [9.96224951e-01, 3.77504890e-03, 6.25717338e-14],\n","       [3.80791275e-06, 1.78898307e-02, 9.82106361e-01],\n","       [9.59015260e-01, 4.09847260e-02, 1.40796341e-08],\n","       [9.88423742e-01, 1.15762572e-02, 7.99723972e-10],\n","       [3.28021073e-06, 1.02864096e-02, 9.89710310e-01],\n","       [9.85724462e-01, 1.42755375e-02, 5.66669384e-11],\n","       [9.94106084e-01, 5.89391614e-03, 2.85607347e-11],\n","       [1.20859860e-09, 8.25694015e-06, 9.99991742e-01],\n","       [5.93108189e-03, 7.28220289e-01, 2.65848629e-01],\n","       [4.31361514e-02, 9.56682656e-01, 1.81192630e-04],\n","       [8.63277425e-03, 9.81786386e-01, 9.58083930e-03],\n","       [9.00441739e-08, 1.61882126e-03, 9.98381089e-01],\n","       [8.44827772e-06, 1.93643572e-02, 9.80627195e-01],\n","       [3.92808488e-07, 2.36613730e-03, 9.97633470e-01],\n","       [9.93656449e-01, 6.34355098e-03, 1.00119346e-10],\n","       [8.00848049e-10, 9.74443671e-06, 9.99990255e-01],\n","       [9.67380069e-01, 3.26199305e-02, 1.78848837e-10],\n","       [2.23097808e-02, 9.77094836e-01, 5.95383688e-04],\n","       [5.54583778e-10, 1.52532046e-05, 9.99984746e-01],\n","       [4.15452369e-02, 9.54943770e-01, 3.51099271e-03],\n","       [9.94047138e-01, 5.95286238e-03, 5.07347362e-12],\n","       [7.10236627e-03, 9.91541687e-01, 1.35594718e-03],\n","       [6.41987453e-07, 2.79789182e-03, 9.97201466e-01]])"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["probs_y = np.round(probs_y, 2)"],"metadata":{"id":"gE4H1qclykOu","executionInfo":{"status":"ok","timestamp":1711884213621,"user_tz":-330,"elapsed":453,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score"],"metadata":{"id":"qG-avsxiQQsN","executionInfo":{"status":"ok","timestamp":1711884352065,"user_tz":-330,"elapsed":10,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["print(accuracy_score(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R7dC0Zi727Ck","executionInfo":{"status":"ok","timestamp":1711884356139,"user_tz":-330,"elapsed":6,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"c59bb274-2ad4-4d44-bf76-aba5531f5541"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["1.0\n"]}]},{"cell_type":"code","source":["# Making the Confusion Matrix\n","from sklearn.metrics import confusion_matrix\n","cm = confusion_matrix(y_test, y_pred)\n","print(cm)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FFE_QkQozeA_","executionInfo":{"status":"ok","timestamp":1711884374141,"user_tz":-330,"elapsed":552,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"c1f99d34-366b-477f-eadb-3441ee2bfc3d"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["[[11  0  0]\n"," [ 0  6  0]\n"," [ 0  0 13]]\n"]}]},{"cell_type":"code","source":["#Plot confusion matrix\n","import seaborn as sns\n","import pandas as pd\n","# confusion matrix sns heatmap\n","## https://www.kaggle.com/agungor2/various-confusion-matrix-plots\n","ax = plt.axes()\n","df_cm = cm\n","sns.heatmap(df_cm, annot=True, annot_kws={\"size\": 30}, fmt='d',cmap=\"Blues\", ax = ax )\n","ax.set_title('Confusion Matrix')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"Pdken2QWzhSZ","executionInfo":{"status":"ok","timestamp":1711884378793,"user_tz":-330,"elapsed":877,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}},"outputId":"271320ba-9be4-4101-e571-fc55a6149a7c"},"execution_count":46,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import pickle\n","modelfile=pickle.dump(classifier,open('/content/drive/MyDrive/modelfile.pkl.txt','wb'))"],"metadata":{"id":"4MG4o7OBQzYY","executionInfo":{"status":"ok","timestamp":1711885547507,"user_tz":-330,"elapsed":37,"user":{"displayName":"Anushka Gupta","userId":"00627601380626389125"}}},"execution_count":51,"outputs":[]}]}